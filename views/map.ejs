<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Security-Policy" content="default-src * 'unsafe-inline' 'unsafe-eval'; img-src * data: blob:; connect-src *">
    <title>Kizu Server Map</title>
    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
            overflow: hidden;
            font-family: Arial, sans-serif;
        }
        .map-container {
            width: 100%;
            height: 100vh;
            border: none;
        }
        #mapFrame {
            width: 100%;
            height: 100vh;
            border: none;
        }
        .webgl-error {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #fee;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            display: none;
        }
    </style>
</head>
<body>
    <div id="webglError" class="webgl-error">
        WebGL is not enabled or supported. Please enable WebGL in your browser settings.
    </div>

    <iframe 
        id="mapFrame"
        src="/map-proxy"
        class="map-container"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; webgl"
        sandbox="allow-same-origin allow-scripts allow-popups allow-forms allow-pointer-lock allow-modals"
        allowfullscreen
        webglcontextlost="handleContextLost(event)"
        webglcontextrestored="handleContextRestored(event)">
    </iframe>

    <script>
        const frame = document.getElementById('mapFrame');
        const baseUrl = 'http://play.kizuserver.xyz:25684';
        
        // Function to fix URLs
        function fixUrl(url) {
            if (!url) return url;
            
            // Skip data URLs
            if (url.startsWith('data:')) return url;
            
            // Already proxied
            if (url.startsWith('/map-proxy')) return url;
            
            // Remove base URL if present
            url = url.replace(baseUrl, '');
            
            // Add proxy prefix
            if (!url.startsWith('/')) url = '/' + url;
            return '/map-proxy' + url;
        }

        // Function to replace all URLs with proxy URLs
        function replaceMapUrls(doc) {
            try {
                // Handle all elements with src or href
                const elements = doc.querySelectorAll('[src], [href], [data-src]');
                elements.forEach(element => {
                    ['src', 'href', 'data-src'].forEach(attr => {
                        if (element.hasAttribute(attr)) {
                            element.setAttribute(attr, fixUrl(element.getAttribute(attr)));
                        }
                    });
                });

                // Handle inline styles with URLs
                const styles = doc.getElementsByTagName('style');
                Array.from(styles).forEach(style => {
                    if (style.textContent) {
                        style.textContent = style.textContent.replace(
                            /url\(['"]?([^'")\s]+)['"]?\)/g,
                            (match, url) => `url('${fixUrl(url)}')`
                        );
                    }
                });

                // Handle background images
                const elementsWithStyle = doc.querySelectorAll('[style*="url"]');
                elementsWithStyle.forEach(element => {
                    const style = element.getAttribute('style');
                    if (style) {
                        element.setAttribute('style', style.replace(
                            /url\(['"]?([^'")\s]+)['"]?\)/g,
                            (match, url) => `url('${fixUrl(url)}')`
                        ));
                    }
                });
            } catch (e) {
                console.error('Error in replaceMapUrls:', e);
            }
        }

        frame.onload = function() {
            try {
                const frameDoc = frame.contentDocument || frame.contentWindow.document;
                replaceMapUrls(frameDoc);

                // Observe DOM changes
                const observer = new MutationObserver((mutations) => {
                    replaceMapUrls(frameDoc);
                });

                observer.observe(frameDoc.body, {
                    childList: true,
                    subtree: true,
                    attributes: true,
                    characterData: true
                });

                // Inject URL interceptors
                const script = frameDoc.createElement('script');
                script.textContent = `
                    // Intercept fetch
                    const originalFetch = window.fetch;
                    window.fetch = async function(url, options) {
                        if (typeof url === 'string') {
                            // Handle external API calls
                            if (url.includes('stats-mod-backend.vercel.app')) {
                                url = '/map-proxy/' + url;
                            } else {
                                // Handle map server URLs
                                url = url.replace('${baseUrl}', '');
                                if (!url.startsWith('/map-proxy')) {
                                    url = '/map-proxy' + (url.startsWith('/') ? '' : '/') + url;
                                }
                            }
                        }
                        return originalFetch(url, options);
                    };

                    // Intercept XHR
                    const originalOpen = XMLHttpRequest.prototype.open;
                    XMLHttpRequest.prototype.open = function(method, url, ...args) {
                        if (typeof url === 'string') {
                            // Handle external API calls
                            if (url.includes('stats-mod-backend.vercel.app')) {
                                url = '/map-proxy/' + url;
                            } else {
                                // Handle map server URLs
                                url = url.replace('${baseUrl}', '');
                                if (!url.startsWith('/map-proxy')) {
                                    url = '/map-proxy' + (url.startsWith('/') ? '' : '/') + url;
                                }
                            }
                        }
                        return originalOpen.call(this, method, url, ...args);
                    };

                    // Intercept Image loading
                    const originalImageSrc = Object.getOwnPropertyDescriptor(Image.prototype, 'src');
                    Object.defineProperty(Image.prototype, 'src', {
                        set: function(url) {
                            if (typeof url === 'string' && !url.startsWith('data:')) {
                                url = url.replace('${baseUrl}', '');
                                if (!url.startsWith('/map-proxy')) {
                                    url = '/map-proxy' + (url.startsWith('/') ? '' : '/') + url;
                                }
                            }
                            originalImageSrc.set.call(this, url);
                        }
                    });
                `;
                frameDoc.body.appendChild(script);
            } catch (e) {
                console.error('Error in onload:', e);
            }
        };
    </script>
</body>
</html> 